# A recursive factorial algorithm
# Inspired by the SubX example near the bottom of this post:
# http://akkartik.name/post/mu-2019-1
#
# To run:
#   $ exe/ucisc examples/factorial.ucisc
#
# Stack result should be:
# INFO: Stack: FFFF => 0x0018

################
# Syntax Setup #
################
$stack as 1.mem
&pc as 0.reg

# ALU op codes
$subtract as 0xB.op
$multiply as 0xC.op

# Simple conditional syntax sugar
$zero? as 0.eff

################
#  Code Entry  #
################
copy 0.imm &stack

$stack[1] <= factorial(4.imm)

# halt
copy &pc &pc

################
# Main Section #
################
factorial: # (n)
  $n, $return, $result = $stack
  # calculate n - 1, push to stack
  $n_1 = compute $subtract 1.imm $n push
  {
    # factorial(1) = 1, copy 1 to result
    copy $n $result $zero?
    copy &pc break.disp &pc $zero?
  
    # compute factorial(n-1)
    $stack <= factorial($n_1)

    # multiply n * factorial(n-1)
    compute $multiply $n $n_1
    # Copy answer to result
    copy $n_1 $result
  } 

  # pop to return address
  copy &return &stack

  # jump return, pop return address off stack
  copy $return &pc pop

