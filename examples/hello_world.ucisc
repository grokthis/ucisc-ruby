# Print hello world to the console
#
# To run:
#   $ exe/ucisc examples/hello_world.ucisc core/stdlib.ucisc
#
# The stack should be empty when complete. It prints the following:
#
# Hello, world! uCISC is here!

################
# Syntax Setup #
################
&pc as 0.reg
&banking as 4.reg

# Conditionals
$zero? as 0.eff
$not_zero? as 1.eff

# Compute Ops
$shift_left as 0x5.op
$shift_right as 0x6.op
$high_byte as 0x8.op # zero least significant byte
$add as 0xA.op

################
#  Code Entry  #
################
&stack as copy 0.imm 1.reg

$stack[1] <= init_device(16.imm)
$&device_control = $stack

$stack <= print_string($&device_control, hello.imm)

# pop device control
copy &&device_control 1.imm &stack

# halt
copy &pc &pc

################
# Main Section #
################
hello:
% "\nHello, world! uCISC is here!\n\n"

print_string: # (&device_control, &string)
  $&string, $&device_control, $&return = $stack

  &device_control = copy $&device_control 3.reg
  $&device_bank = $device_control 1.imm

  #bank control segment
  copy 1.imm &banking
  &stdout as compute $high_byte $&device_bank 3.reg
  #bank stdout buffer segment
  copy 2.imm &banking

  &string as copy $&string 2.reg
  $string.len, $string.data = $string

  # Length is in bytes, add 1 and divide by 2 to get word len
  $word_len = copy $string.len $stack push
  compute $add 1.imm $word_len
  compute $shift_right 1.imm $word_len

  $stack <= mem_copy(&string.data, &stdout, $word_len)

  &string as copy $&string 2.reg
  $string.len = $string
  &device_control = copy $&device_control 3.reg
  $stdout.read_count as $device_control 6.imm
  # we need to put $string.len on the stack so banking doesn't make it invisible
  $len = copy $string.len $stack push

  #bank control segment
  copy 1.imm &banking
  # write length to terminal control
  copy $len $stdout.read_count
  # Unbank all regions
  copy 0.imm &banking

  # Jump return
  copy &&return &stack
  copy $&return &pc pop

