# Compute Fibonacci numbers
#
# By default, computes fib(8) == 21. Change the immediate value in the fib
# function call to compute other numbers. fib(24.imm) is the maximum value that
# will compute correctly. fib(25.imm) and up will overflow 16-bits when adding
# the final result, but will still terminate.
#
# To run:
#   $ exe/ucisc examples/fib.ucisc
#
# Stack result should be:
# INFO: Stack: FFFF => 0x0015

################
# Syntax Setup #
################
$stack as 1.mem
&pc as 0.reg

# ALU op codes
$add as 0xA.op
$subtract as 0xB.op

# Simple conditional syntax sugar
$zero? as 0.eff
$not_zero? as 1.eff
$negative? as 2.eff

################
#  Code Entry  #
################
copy 0.imm &stack

$stack[1] <= fib(8.imm)

# halt
copy &pc &pc

################
# Main Section #
################
fib:
  $n, $return, $result = $stack
  # push n - 1
  $n_1 = compute $subtract 1.imm $n push
  {
    # if negative, n == 0
    copy &pc break.disp &pc $negative?
    # if zero, n == 1
    copy &pc break.disp &pc $zero?

    $n_2 = compute $subtract 1.imm $n_1 push

    # Recurse for fib(n-1) and fib(n-2)
    $stack[1] <= fib($n_1)
    $stack[1] <= fib($n_2)
    $fib_n_2, $fib_n_1 = $stack

    $fib_n = compute $add $fib_n_1 $fib_n_2

    #copy fib(n) to result
    copy $fib_n $result

    # Pop stack to return
    copy &return &stack
   
    # Jump return and pop address 
    copy $return &pc pop
  }
  # Need reset vars, after block messes with stack
  $n_1, $n, $return, $result = $stack

  # n == 1 or n == 0, return n
  # Save result to return
  copy $n $result
  copy &return &stack

  # Jump return and pop address
  copy $return &pc pop
