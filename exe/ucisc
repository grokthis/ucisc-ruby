#!/usr/bin/env ruby

require "bundler/setup"
require "micro_cisc"
require "byebug"

class MC
  def initialize(file)
    @file = file
    parse
  end

  def parse
    text = File.open(@file).read
    line_number = 1
    @instructions = []
    address = 0
    @labels = {}
    errors = []
    lgen = MicroCisc::Compile::LabelGenerator.new(@file.gsub('.ucisc', ''))
    text.each_line do |line|
      begin
        statement = MicroCisc::Compile::Statement.new(lgen, line)
        statement.parse.each do |instruction|
          if instruction.label?
            @labels[instruction.label] = address
            puts "#{line_number}: #{instruction.label}"
          elsif instruction.instruction?
            @instructions << instruction
            address += 1
            puts "#{line_number}: 0x#{instruction.encoded.to_s(16).upcase}" + instruction.original
          elsif instruction.data?
            @instructions << instruction.data
            address += instruction.data.length
            puts "#{line_number}: 0x#{instruction.data.unpack("C*").map { |c| c.to_s(16) }.join}"
          end
        end
      rescue ArgumentError => e
        puts "Error on line #{line_number}: #{e.message}"
        puts line
        errors << [line_number, e, line]
      end
      line_number += 1
    end

    if errors.size > 0
      puts
      puts
      puts "Errors found:"
      puts
      errors.each do |error|
        puts "#{error[0]}: #{error[1]}\n  #{error[2]}"
      end
      exit(1)
    end
  end

  def serialize(file = nil)
    @serialize ||=
      begin
        words = []
        @instructions.each do |ins|
          if ins.is_a?(String)
            address = words.length
            puts "#{address.to_s(16).upcase}: 0x#{ins.unpack("S*").map { |c| c.to_s(16) }.join}"
            words += ins.unpack("S*")
          else
            address = words.length
            puts "#{address.to_s(16).upcase}: 0x#{ins.encoded(@labels, address).to_s(16).upcase}" + ins.original
            words << ins.encoded(@labels, address)
          end
        end
        words
      end

    File.open(file, 'w') do |file|
      file.write(@serialize.pack("S*"))
    end if file

    @serialize
  end

  def run
    processor = MicroCisc::Vm::Processor.new(0, serialize)
    processor.debug = ARGV.include?('-d')
    begin
      processor.run
    rescue StandardError => e
      puts "Execution terminated: #{e.message}"
      puts "  #{e.backtrace.join("\n  ")}"
    end
    processor
  end
end

if ARGV.length < 1
  puts "Usage:"
  puts "  ucisc <file_name>"
  exit(0)
end

file_name = ARGV.first
puts "Reading #{file_name}"
mc = MC.new(file_name)
puts "Writing #{file_name}.bin"
words = mc.serialize
#puts "Writing #{file_name}.json for use in EEPROM on CircuitVerse"
#json = "[#{(words + Array.new(256 - words.size).map { 0 }).join(',')}]"
#File.open("#{file_name}.json", 'w') do |file|
#  file.write(json)
#end
puts "Running program with #{words.size * 2} bytes"
mc.run
puts "Done."
